name: Protect Infrastructure Files
on:
  push:
    branches:
      - main

jobs:
  protect-infrastructure:
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.draft
      == false
    runs-on: ubuntu-latest
    steps:
      - name: Start Energy Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          task: start-measurement
      - if: github.event_name == 'pull_request_target'
        name: Check for infrastructure file changes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: "// Get the PR author and check if they're a maintainer\nconst prAuthor\
            \ = context.payload.pull_request.user.login;\nconst { data: authorPermission\
            \ } = await github.rest.repos.getCollaboratorPermissionLevel({\n  owner:\
            \ context.repo.owner,\n  repo: context.repo.repo,\n  username: prAuthor\n\
            });\n\nconst isMaintainer = ['admin', 'maintain'].includes(authorPermission.permission);\n\
            \n// Get list of files changed in the PR\nconst { data: files } = await\
            \ github.rest.pulls.listFiles({\n  owner: context.repo.owner,\n  repo:\
            \ context.repo.repo,\n  pull_number: context.payload.pull_request.number\n\
            });\n\n// Check for infrastructure file changes\nconst infrastructureFiles\
            \ = files.filter(file =>\n  file.filename.startsWith('.github/') ||\n\
            \  file.filename === 'pyproject.toml' ||\n  file.filename === 'tox.ini'\
            \ ||\n  file.filename === '.pre-commit-config.yaml' ||\n  file.filename\
            \ === '.pylintrc' ||\n  file.filename === 'Dockerfile' ||\n  file.filename\
            \ === 'autoformat.sh' ||\n  file.filename === '.gitignore' ||\n  file.filename\
            \ === 'CONTRIBUTING.md' ||\n  file.filename === 'LICENSE' ||\n  file.filename\
            \ === 'CITATION.cff'\n);\n\nif (infrastructureFiles.length > 0 && !isMaintainer)\
            \ {\n  // Check if changes are only formatting/whitespace\n  let hasStructuralChanges\
            \ = false;\n  for (const file of infrastructureFiles) {\n    const additions\
            \ = file.additions || 0;\n    const deletions = file.deletions || 0;\n\
            \    const changes = file.changes || 0;\n\n    // If file has significant\
            \ changes (not just whitespace), consider it structural\n    if (additions\
            \ > 5 || deletions > 5 || changes > 10) {\n      hasStructuralChanges\
            \ = true;\n      break;\n    }\n  }\n\n  const fileList = infrastructureFiles.map(f\
            \ => `  - ${f.filename} (${f.changes} changes)`).join('\\n');\n\n  //\
            \ Post a comment explaining the issue\n  await github.rest.issues.createComment({\n\
            \    owner: context.repo.owner,\n    repo: context.repo.repo,\n    issue_number:\
            \ context.payload.pull_request.number,\n    body: `\u274C **Infrastructure\
            \ File Protection**\\n\\n` +\n          `This PR modifies protected infrastructure\
            \ files:\\n\\n${fileList}\\n\\n` +\n          `Only repository maintainers\
            \ are allowed to modify infrastructure files (including \\`.github/\\\
            `, build configuration, and repository documentation).\\n\\n` +\n    \
            \      `**Note**: If these are only formatting changes, please:\\n` +\n\
            \          `1. Revert changes to \\`.github/\\` files\\n` +\n        \
            \  `2. Use \\`./autoformat.sh\\` to format only source code directories\\\
            n` +\n          `3. Avoid running formatters on infrastructure files\\\
            n\\n` +\n          `If structural changes are necessary:\\n` +\n     \
            \     `1. Open an issue describing the needed infrastructure changes\\\
            n` +\n          `2. A maintainer will review and implement the changes\
            \ if approved\\n\\n` +\n          `For more information, see our [Contributing\
            \ Guidelines](https://github.com/google/langextract/blob/main/CONTRIBUTING.md).`\n\
            \  });\n\n  core.setFailed(\n    `This PR modifies ${infrastructureFiles.length}\
            \ protected infrastructure file(s). ` +\n    `Only maintainers can modify\
            \ these files. ` +\n    `Use ./autoformat.sh to format code without touching\
            \ infrastructure.`\n  );\n} else if (infrastructureFiles.length > 0 &&\
            \ isMaintainer) {\n  core.info(`PR modifies ${infrastructureFiles.length}\
            \ infrastructure file(s) - allowed for maintainer ${prAuthor}`);\n} else\
            \ {\n  core.info('No infrastructure files modified');\n}\n"
      - id: display-measurement
        name: Display Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          task: display-results
      - name: Save Total Energy Consumption Data
        run: echo '${{ steps.final-measurement.outputs.data-total-json }}' > total_energy_consumption.json
      - name: Upload Energy Consumption Artifact
        uses: actions/upload-artifact@v4
        with:
          name: total-energy-consumption
          path: total_energy_consumption.json
permissions:
  contents: read
  pull-requests: write
